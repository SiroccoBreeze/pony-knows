// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  posts         Post[]
  comments      Comment[]
  messages      Message[] // 用户接收的消息
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[] // 用户角色关联
  adminLogs     AdminLog[] // 管理员操作日志
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true) // 用户是否处于激活状态
  status        String    @default("approved") // 用户审核状态：pending(待审核)、approved(已通过)、rejected(已拒绝)
}

// 角色模型
model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  permissions String[]   // 存储权限标识符数组
  users       UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// 用户角色关联表
model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}

// 管理员操作日志
model AdminLog {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String   // 操作类型
  resource   String   // 资源类型
  resourceId String?  // 资源ID
  details    Json?    // 详细信息
  ip         String?  // IP地址
  userAgent  String?  // 用户代理
  createdAt  DateTime @default(now())
}

// NextAuth.js 所需表 - 第三方账户
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js 所需表 - 会话
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js 所需表 - 验证令牌
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 帖子表
model Post {
  id           String      @id @default(uuid())
  title        String
  content      String
  author       User        @relation(fields: [authorId], references: [id])
  authorId     String
  comments     Comment[]
  tags         Tag[]       @relation("PostToTag") // 反向关系字段
  postTags     PostToTag[] // 明确反向关系字段
  messages     Message[]   // 与该帖子相关的消息
  status       String      // 帖子状态：published(已发布)、draft(草稿)、archived(已归档)
  reviewStatus String      @default("approved") // 审核状态：pending(待审核)、approved(已通过)、rejected(已拒绝)
  views        Int         @default(0) // 浏览量计数
  images       PostImage[] // 帖子包含的图片
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// 评论表
model Comment {
  id              String    @id @default(cuid())
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  parent          Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId        String?
  replies         Comment[] @relation("CommentReplies")
  replyToUserId   String?
  replyToUserName String?
}

// 标签表
model Tag {
  id        String      @id @default(uuid())
  name      String      @unique
  posts     Post[]      @relation("PostToTag") // 反向关系字段
  postTags  PostToTag[] // 明确反向关系字段
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// 帖子与标签关联表（多对多关系）
model PostToTag {
  postId    String
  tagId     String
  post      Post     @relation(fields: [postId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, tagId])
}

// 消息表
model Message {
  id        String   @id @default(uuid())
  title     String
  content   String
  read      Boolean  @default(false)
  type      String   // 'reply' 或 'system'
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId    String?
  sender    String?  // 发送者名称
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 系统设置表
model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  group     String   // 设置分组
  label     String   // 显示名称
  type      String   // 设置类型：text, number, boolean, select等
  options   Json?    // 选项值（用于select类型）
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 帖子图片表
model PostImage {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  url       String   // 图片URL
  filename  String   // MinIO中的文件名
  size      Int      // 图片大小（字节）
  type      String   // 图片MIME类型
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}
